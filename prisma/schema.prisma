// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  servers       Server[]  @relation("servers-users")
  selectedchannels  Channel[]
  serversOwned  Server[]
  messages      Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Server {
  id       String    @id @default(cuid())
  name     String    @db.VarChar(255)
  users    User[]    @relation("servers-users")
  channels Channel[]
  owner    User     @relation(fields: [ownerId], references: [id])
  ownerId  String
}

model Channel {
  id       String  @id @default(cuid())
  name     String  @db.VarChar(255)
  type     String  @db.VarChar(255)
  server   Server @relation(fields: [serverId], references: [id])
  serverId String
  messages Message[]
  users    User[]
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  message   String   @db.VarChar(255)
  channel   Channel  @relation(fields: [channelId], references: [id])
  channelId String
  user     User    @relation(fields: [userId], references: [id])
  userId    String
}
